/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Authentication as PrismaAuthentication } from "@prisma/client";

export class AuthenticationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AuthenticationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.authentication.count(args);
  }

  async authentications<T extends Prisma.AuthenticationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthenticationFindManyArgs>
  ): Promise<PrismaAuthentication[]> {
    return this.prisma.authentication.findMany<Prisma.AuthenticationFindManyArgs>(
      args
    );
  }
  async authentication<T extends Prisma.AuthenticationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthenticationFindUniqueArgs>
  ): Promise<PrismaAuthentication | null> {
    return this.prisma.authentication.findUnique(args);
  }
  async createAuthentication<T extends Prisma.AuthenticationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthenticationCreateArgs>
  ): Promise<PrismaAuthentication> {
    return this.prisma.authentication.create<T>(args);
  }
  async updateAuthentication<T extends Prisma.AuthenticationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthenticationUpdateArgs>
  ): Promise<PrismaAuthentication> {
    return this.prisma.authentication.update<T>(args);
  }
  async deleteAuthentication<T extends Prisma.AuthenticationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthenticationDeleteArgs>
  ): Promise<PrismaAuthentication> {
    return this.prisma.authentication.delete(args);
  }
}
